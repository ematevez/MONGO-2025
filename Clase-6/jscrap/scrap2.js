// -----------------------------------------------------------
// Clase 10 ‚Äî MongoDB Relaciones (1 a 1, 1 a muchos, muchos a muchos)
// Ejemplo pr√°ctico completo con Mongoose
// -----------------------------------------------------------

// 1Ô∏è‚É£ IMPORTAMOS DEPENDENCIAS
import mongoose from "mongoose";

// -----------------------------------------------------------
// 2Ô∏è‚É£ CONEXI√ìN A MONGODB LOCAL
// -----------------------------------------------------------
const conectarDB = async () => {
  try {
    await mongoose.connect("mongodb://127.0.0.1:27017/clase10_mongo", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ Conectado a MongoDB local");
  } catch (error) {
    console.error("‚ùå Error al conectar a MongoDB:", error);
  }
};

// -----------------------------------------------------------
// 3Ô∏è‚É£ DEFINIMOS LOS ESQUEMAS (MODELOS)
// -----------------------------------------------------------

// üß± Supermercado (1 a 1 con producto)
const supermercadoSchema = new mongoose.Schema({
  nombre: String,
  direccion: String,
});

// üí¨ Comentario (1 a muchos con producto)
const comentarioSchema = new mongoose.Schema({
  autor: String,
  texto: String,
  fecha: { type: Date, default: Date.now },
});

// üè∑Ô∏è Categor√≠a (muchos a muchos con producto)
const categoriaSchema = new mongoose.Schema({
  nombre: String,
});

// üõí Producto (tiene 1 supermercado, muchos comentarios y muchas categor√≠as)
const productoSchema = new mongoose.Schema({
  nombre: String,
  precio: Number,
  supermercado: { type: mongoose.Schema.Types.ObjectId, ref: "Supermercado" }, // 1Ô∏è‚É£ a 1
  comentarios: [{ type: mongoose.Schema.Types.ObjectId, ref: "Comentario" }], // 1Ô∏è‚É£ a muchos
  categorias: [{ type: mongoose.Schema.Types.ObjectId, ref: "Categoria" }], // muchos a muchos
});

// -----------------------------------------------------------
// 4Ô∏è‚É£ CREAMOS LOS MODELOS
// -----------------------------------------------------------
const Supermercado = mongoose.model("Supermercado", supermercadoSchema);
const Comentario = mongoose.model("Comentario", comentarioSchema);
const Categoria = mongoose.model("Categoria", categoriaSchema);
const Producto = mongoose.model("Producto", productoSchema);

// -----------------------------------------------------------
// 5Ô∏è‚É£ FUNCI√ìN PRINCIPAL DE PRUEBA
// -----------------------------------------------------------
const main = async () => {
  await conectarDB();

  // üîÑ Limpiamos colecciones anteriores (para pruebas)
  await Supermercado.deleteMany({});
  await Comentario.deleteMany({});
  await Categoria.deleteMany({});
  await Producto.deleteMany({});

  console.log("üßπ Base de datos limpia para nueva prueba.");

  // üè™ Creamos un supermercado
  const super1 = await Supermercado.create({
    nombre: "Supermercado Verde",
    direccion: "Av. Siempre Viva 123",
  });

  // üí¨ Creamos algunos comentarios
  const com1 = await Comentario.create({
    autor: "Juan",
    texto: "Excelente calidad y frescura!",
  });
  const com2 = await Comentario.create({
    autor: "Mar√≠a",
    texto: "Un poco caro, pero vale la pena.",
  });

  // üè∑Ô∏è Creamos categor√≠as
  const cat1 = await Categoria.create({ nombre: "Verduras" });
  const cat2 = await Categoria.create({ nombre: "Org√°nicos" });

  // üõí Creamos un producto con relaciones
  const producto = await Producto.create({
    nombre: "Lechuga",
    precio: 150,
    supermercado: super1._id, // 1 a 1
    comentarios: [com1._id, com2._id], // 1 a muchos
    categorias: [cat1._id, cat2._id], // muchos a muchos
  });

  console.log("‚úÖ Producto guardado correctamente.");

  // -----------------------------------------------------------
  // 6Ô∏è‚É£ CONSULTAMOS USANDO populate()
  // -----------------------------------------------------------
  const productos = await Producto.find()
    .populate("supermercado") // trae los datos del supermercado
    .populate("comentarios") // trae los datos de los comentarios
    .populate("categorias"); // trae los datos de las categor√≠as

  console.log("\nüì¶ Resultado completo con populate():");
  console.log(JSON.stringify(productos, null, 2));

  // -----------------------------------------------------------
  // 7Ô∏è‚É£ CERRAMOS CONEXI√ìN
  // -----------------------------------------------------------
  await mongoose.connection.close();
  console.log("\nüîí Conexi√≥n a MongoDB cerrada.");
};

// -----------------------------------------------------------
// 8Ô∏è‚É£ EJECUTAMOS EL SCRIPT
// -----------------------------------------------------------
main();
